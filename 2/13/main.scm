(define (apply-percent x p) (/ (* x p) 100))

(define (make-interval a b) (cons a b))
(define (lower-bound z) (car z))
(define (upper-bound z) (cdr z))

(define (make-center-percent c p)
  (let ((p (apply-percent c p)))
    (make-interval (- c p) (+ c p))))

(define (center i)
  (/ (+ (lower-bound i)
        (upper-bound i))
     2))

(define (percent i)
  (let ((c (center i)))
    (* (/ (- (upper-bound i) c) c) 100)))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x)
               (lower-bound y)))
        (p2 (* (lower-bound x)
               (upper-bound y)))
        (p3 (* (upper-bound x)
               (lower-bound y)))
        (p4 (* (upper-bound x)
               (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(let ((p1 3)
      (p2 5))
     (display "expected ")
     (display (+ p1 p2))
     (newline)
     (display "got ")
     (display (percent (mul-interval (make-center-percent 20 p1)
                                     (make-center-percent 15 p2)))))
