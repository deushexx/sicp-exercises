(define (exp b n)
  (define (exp-iter a b n)
    (display a) (newline)
    (display b) (newline)
    (display n) (newline)
    (newline)
    (cond ((= n 0) a)
          ((and (even? n) (not (= a 1)))
           (exp-iter (* a a) b (/ n 2)))
          (else (exp-iter (* a b) b (- n 1)))))
  (exp-iter 1 b n))

(define (even? n)
  (= (remainder n 2) 0))

; (exp 2 1)
; (exp 2 2)
; (exp 2 3)
(exp 2 6)
; (exp 2 5)
; (exp 2 6)
