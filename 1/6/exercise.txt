(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))

(new-if (= 2 3) 0 5)
(new-if (= 1 1) 0 5)

(define (square x) (* x x))

(define (average x y)
  (/ (+ x y) 2))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (improve guess x)
  (average guess (/ x guess)))

(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))


the `if` expression is a special form that establishes the rule to evaluate only one of the expressions, accordingly to the result of the predicate.
Using new-if in this way causes illimited recursion (and a stack overflow) because both of the expressions are being evaluated, and sqrt-iter is expanding to iteself indefinitively.
